buildscript {
    ext {
        allureVersion = '2.21.0'
        selenideVersion = '6.17.0'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group 'org.rococo'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.19")
        autoconfigure.set(true)
        aspectjWeaver.set(true)
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // REST
    testImplementation ('com.squareup.retrofit2:retrofit:2.9.0') {
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.squareup.okio'
    }
    testImplementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    testImplementation 'com.squareup.okhttp3:logging-interceptor:3.14.9'
    testImplementation 'org.springframework.data:spring-data-commons:3.1.3'
    // DB
    testImplementation 'org.postgresql:postgresql:42.5.3'
    testImplementation 'p6spy:p6spy:3.9.1'
    testImplementation 'org.hibernate:hibernate-core:6.1.7.Final'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.3'
    testImplementation 'org.springframework.security:spring-security-crypto:6.1.0'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'commons-logging:commons-logging:1.2'
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter-api"
        exclude group: "org.junit.platform"
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation ("io.qameta.allure:allure-okhttp3:${allureVersion}"){
        exclude group: 'com.squareup.okhttp3'
    }
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // Utils
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'org.assertj:assertj-core:3.24.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}